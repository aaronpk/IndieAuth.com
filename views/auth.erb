<script src=https://cdnjs.cloudflare.com/ajax/libs/libsodium-wrappers/0.5.1/sodium.js></script>
<script>
var me = "<%= @me %>";
var redirect_uri = "<%= @redirect_uri %>";
var client_id = "<%= @client_id %>";
var state = "<%= EscapeUtils.escape_javascript @state %>";
var scope = "<%= EscapeUtils.escape_javascript @scope %>";
var email_verification;

function set_provider_status(index, status, error) {
  $("#profile_"+index+" .status_img").addClass(status).removeClass("loading");
  if(error) {
    $("#profile_"+index+" .status").html(error);
  }
}

function update_progress_bar() {

  // The "success" bar starts out at 15% because 5% is reserved for starting the page and 10% is reserved for loading the links
  var success = ($("#profiles .status_img.verified").length / $("#profiles li").length) * 0.85;
  var warning = ($("#profiles .status_img.unsupported").length / $("#profiles li").length) * 0.85;
  var error = ($("#profiles .status_img.error").length / $("#profiles li").length) * 0.85;

  success = Math.round(success*100);
  warning = Math.round(warning*100);
  error = Math.round(error*100)

  while(success + warning + error > 100) {
    success = success - 1;
  }

  $("#progress_bar .bar-verified").css("width", success+"%");
  $("#progress_bar .bar-info").css("width", warning+"%");
  $("#progress_bar .bar-danger").css("width", error+"%");
}

function complete_progress_bar() {
  $("#progress_bar").removeClass("active progress-striped");
}

function set_up_email_auth() {
  $(".email-auth").unbind("click").click(function(){
    var btn = $(this);
    var status = $(this).parents('li').children('.status');
    unbind_keyboard_listeners();

    if(btn.text() == "Verify") {
      btn.attr("disabled","disabled");
      status.text("Verifying...");

      $.get(email_verification+"/auth/verify_email.json", {
        me: me,
        profile: $(this).attr('href'),
        code: btn.parent().children('.email_code').val()
      }, function(data){
        if(data.result == "verified") {
          status.text("Code was successfully verified! Redirecting...");
          window.location = data.redirect;
        } else {
          bind_keyboard_listeners();
          btn.parent().children('input[type=text]').val('');
          btn.text()
          status.text("The code you entered did not match, or the code expired.");
        }
      });
    } else {
      btn.attr("disabled","disabled");
      status.text("Sending verification code...");

      $.get("/auth/send_email.json", {
        me: me,
        profile: btn.attr('href'),
        redirect_uri: redirect_uri
      }, function(data){
        if(data.result == "sent") {
          email_verification = data.verify;
          // Swap the button for a field to enter the code
          btn.text("Verify").removeAttr("disabled").addClass("pending");
          status.text("Sent! Enter the verification code you received above.");
          btn.parent().prepend('<input type="text" id="email_code_input" class="span1 email_code">')
          $("#email_code_input").focus();
          $("#email_code_input").on('keydown', function(e){
            if(e.keyCode == 13) {
              $(".email-auth.pending").click();
            }
          });
        }
      });
    }
    return false;
  });
}
function verify_password(site_key){
    var password = $("#password").val()
    var seed = sodium.crypto_generichash(32, password)
    var keypair = sodium.crypto_sign_seed_keypair(seed)
    var date = Date.now().toString()
    var sig = sodium.crypto_sign_detached(date, keypair.privateKey, 'hex')
    $.post("/auth/verify_password.json", {
      redirect_uri: redirect_uri, 
      signature: sig, 
      message: date, 
      public_key: site_key
    }, 
    function(data){
      window.location = data.redirect_uri
    })

}
function set_up_gpg_auth() {
  var plaintext;

  $(".gpg-auth").unbind("click").click(function(){
    var btn = $(this);

    $("#gpg-popup .btn-primary").attr("disabled", "disabled");
    $("#gpg-popup .alert").html("Loading...").removeClass("alert-error").show();
    $("#gpg-popup .signature").removeAttr("disabled").val("");
    $("#gpg-popup .plaintext").val("");
    $("#gpg-popup .fields").hide();
    show_gpg_popup();
    unbind_keyboard_listeners();

    // Check the page to see if there is a challenge pre-generated
    var challenge;
    var profile_url = btn.attr('href');
    if(challenge=$(".gpg_challenge[data-profile='"+profile_url+"']").text()) {
      plaintext = challenge;
      $("#gpg-popup .signature").val(plaintext).removeAttr("disabled");
      $("#gpg-popup .plaintext").val(plaintext);
      $("#gpg-popup .btn-primary").removeAttr("disabled");
      $("#gpg-popup .alert").html("").removeClass("alert-error").hide();
      $("#gpg-popup .fields").show();
      show_gpg_popup();
      $("#gpg-popup .signature").focus();
    } else {
      $.post("/auth/start_gpg.json", {
        me: me,
        profile: btn.attr('href'),
        redirect_uri: redirect_uri,
        client_id: client_id,
        scope: scope,
        state: state
      }, function(data){
        if(data.plaintext) {
          plaintext = data.plaintext;
          $("#gpg-popup .signature").val(data.plaintext).removeAttr("disabled");
          $("#gpg-popup .plaintext").val(data.plaintext);
          $("#gpg-popup .btn-primary").removeAttr("disabled");
          $("#gpg-popup .alert").html("").removeClass("alert-error").hide();
          $("#gpg-popup .fields").show();
          show_gpg_popup();
          $("#gpg-popup .signature").focus();
        } else if(data.error) {
          $("#gpg-popup .alert").html(data.error_description).addClass("alert-error");
          show_gpg_popup();
        } else {
          $("#gpg-popup .alert").html("An unknown error occurred").addClass("alert-error");
          show_gpg_popup();
        }
      });
    }

    return false;
  });
  $("#gpg-popup .btn-primary").unbind("click").click(function(){
    $("#gpg-popup .btn-primary").attr("disabled", "disabled");
    $("#gpg-popup .signature").attr("disabled", "disabled");
    $("#gpg-popup .alert").html("Verifying...").removeClass("alert-error").show();
    show_gpg_popup();
    $.post("/auth/verify_gpg.json", {
      signature: $("#gpg-popup .signature").val(),
      plaintext: $("#gpg-popup .plaintext").val()
    }, function(data) {
      if(data.error) {
        $("#gpg-popup .btn-primary").removeAttr("disabled");
        $("#gpg-popup .signature").removeAttr("disabled").val(plaintext);
        if(data.error_description) {
          $("#gpg-popup .alert").html(data.error_description).addClass("alert-error").show();
        } else {
          $("#gpg-popup .alert").html("The signature could not be verified!").addClass("alert-error").show();
        }
        show_gpg_popup();
      } else {
        $("#gpg-popup .alert").html("Success! Redirecting...").addClass("alert-success").show();
        $("#gpg-popup .fields").hide();
        show_gpg_popup();
        window.location = data.redirect_uri;
      }
    });
  });
  $("#gpg-popup .btn-cancel").unbind("click").click(function(){
    $("#gpg-popup .signature").val("");
    $("#gpg-popup .plaintext").val("");
    $("#gpg-popup").hide();
    bind_keyboard_listeners();
  });
}

function show_gpg_popup() {
  $("#gpg-popup").show();
  $("#gpg-popup .in").css("height", $("#gpg-popup form").height()+"px");
  $("#gpg-popup").css("left", ($(window).width()/2) - ($("#gpg-popup").width()/2)+"px");
}

function verify_link_back(me, link, i, use_cached) {

  // Don't make an HTTP request for links we already know aren't valid providers
  if(link.provider == null) {
    set_provider_status(i, 'unsupported', 'This is not a supported authentication provider.');
    provider_verification_finished();
    return;
  }

  // Don't need to verify email links, provide the buttons immediately
  if(link.provider == 'email') {
    var email = link.profile.replace(/mailto:/,'');
    $("#profile_"+i+" .link").html('<a href="'+link.profile+'" class="btn btn-success email-auth begin-auth">'+email+'</a>');
    set_provider_status(i, 'verified', 'Receive a verification code via email');
    set_up_email_auth();
    provider_verification_finished();
    return;
  }

  if(link.provider == 'gpg') {
    var display = link.profile.replace(/https?:\/\//, '');
    $("#profile_"+i+" .link").html('<a href="'+link.profile+'" class="btn btn-success gpg-auth begin-auth">'+'GPG ('+display+')'+'</a>');
    set_provider_status(i, 'verified', 'Click to sign a challenge with your GPG key.');
    set_up_gpg_auth();
    provider_verification_finished();
    return;
  }

  if(link.provider == 'password'){
    var public_key = link.profile.substring(16)
    $("#profile_"+i+" .link").html('<input id="password" type="text" style="margin-bottom: 0px;"><a onClick=verify_password("'+public_key+'") class="btn btn-success password-auth begin-auth">'+'Verify password'+'</a>');
    set_provider_status(i, 'verified', 'This feature should only be used by trusted authentication endpoints' );
    provider_verification_finished();
    return;    
  }



  if(use_cached) {
    var profile = $("#profile_"+i);

    if(profile.data('provider') == 'email') {
      return;
    }

    update_provider_status(link, {
      verified: profile.data('verified'),
      error: false,
      auth_path: profile.data('auth-path')
    }, profile.attr('id').split('_')[1]);

  } else {
    // Verify the url links back to the rel="me" link specified
    $.get("/auth/verify_link.json", {me: me, profile: link.profile}, function(data){
      update_provider_status(link, data, i);
    });
  }
}

function update_provider_status(link, data, i) {
  if(data.error == "unsupported_provider") {
    set_provider_status(i, 'unsupported', 'This is not a supported authentication provider.');
  } else if(data.verified) {
    set_provider_status(i, 'verified', 'Ok! Click to authenticate using this provider.');
    var href = data.auth_path+'&redirect_uri='+encodeURIComponent(redirect_uri);
    $("#profile_"+i+" .link").html('<a href="'+href+'" class="btn btn-success">'+link.profile.replace(/^(https|http):\/\//, "")+'</a>');
  } else if(data.error) {
    var message;
    if(data.error_description) {
      if(data.error_description == 'This auth server cannot be used to authenticate to itself') {
        $("#profile_"+i).hide();
      } else {
        message = data.error_description;
      }
    } else {
      message = 'There was an error verifying this provider. Confirm you have a rel="me" link on this site pointing to your website.';
    }
    set_provider_status(i, 'error', message);
  } else {
    set_provider_status(i, 'error', 'An unknown error occurred with this provider.');
  }

  provider_verification_finished();
}

function provider_verification_finished() {

  if($("#profiles .status_img.verified").length == 0 && $("#profiles .status_img.loading").length == 0) {
    $(".loading_message").hide();
    $(".unsupported_links_error").show();
  } else {
    $("#num_providers").html($("#profiles .status_img.verified").length);
    $(".unsupported_links_error").hide();
    $(".loading_message").hide();
    $(".continue_message").show();
  }
  update_progress_bar();

  // Check if all the providers are done being checked, if so, verify there is at least one valid one
  if($("#profiles .status_img.loading").length == 0) {
    $(".continue_message .rescan-button").show();
    complete_progress_bar();
  } else {
    $(".continue_message .rescan-button").hide();
  }
}

function selected_profile() {
  var selected = $("#profiles li.selected");
  if(selected.length > 0) {
    return $(selected[0]);
  } else {
    return false;
  }
}

function bind_keyboard_listeners() {
  $("body").keydown(function(e) {
    switch(e.keyCode) {
      case 74: // j
        if(selected_profile() == false) {
          // If none is selected yet, select the first
          $($("#profiles li")[0]).addClass("selected");
        } else {
          // Find the ID of this element, then set the next element to "selected"
          var index = parseInt(selected_profile().attr("id").match(/_(\d+)/)[1]);
          $("#profiles li").removeClass("selected");
          if($("#profile_"+(index+1)).length == 0) {
            index = -1;
          }
          $("#profile_"+(index+1)).addClass("selected");
        }
        break;

      case 75: // k
        if(selected_profile() == false) {
          // If none is selected yet, select the last
          var profiles = $("#profiles li");
          $(profiles[profiles.length-1]).addClass("selected");
        } else {
          // Find the ID of this element, then set the previous element to "selected"
          var index = parseInt(selected_profile().attr("id").match(/_(\d+)/)[1]);
          $("#profiles li").removeClass("selected");
          if($("#profile_"+(index-1)).length == 0) {
            index = $("#profiles li").length;
          }
          $("#profile_"+(index-1)).addClass("selected");
        }

        break;
      case 13: // enter
        if(selected_profile() !== false) {
          // click the thing inside
          $("#profiles li.selected a, #profiles li.selected .begin-auth")[0].click();
        } else {
          // nothing selected but they pressed enter, so sign in with the first
          $($("#profiles li")[0]).addClass("selected");
          $("#profiles li.selected a, #profiles li.selected .begin-auth")[0].click();
        }
        break;
    }
  });
}
function unbind_keyboard_listeners() {
  $("body").unbind("keydown");
}

$(function(){
  $("#progress_bar .bar").tooltip({placement: "bottom"});
  update_progress_bar();

  bind_keyboard_listeners();

  start_scan();

  $(".rescan-button").click(function(){
    // Erase all existing profiles
    $("#profiles li").remove();

    // Re-set the notices
    $("#progress_bar .bar-loading").css("width", "5%");
    $("#progress_bar .bar-verified").css("width", "0");
    $("#progress_bar .bar-info").css("width", "0");
    $("#progress_bar .bar-danger").css("width", "0");
    $("#progress_bar").show();

    $(".loading_message").show();

    $(".no_links_error").hide();
    $(".unsupported_links_error").hide();
    $(".continue_message").hide();

    $(".last-refresh").html("");

    // Start a new scan
    start_scan();
  });

});

function start_scan() {
  // Returning users will have a bunch of profiles already written to the HTML
  if($("#profiles li").length > 0) {
    // Skip loading links
    $("#progress_bar .bar-loading").css("width", "15%");
    update_progress_bar();

    // Run the "verify" function which will set up the JS hooks and add the buttons
    // for email profiles, but set to "use_cached" to avoid making HTTP requests
    $("#profiles li").each(function(){
      verify_link_back(me, {
        profile: $(this).data('profile'),
        verified: $(this).data('verified'),
        provider: $(this).data('provider')
      }, $(this).attr('id').split('_')[1], true);
    });
  } else {
    $.get("/auth/supported_providers.json", {me: me}, function(data){
      if(data && data.links && data.links.length > 0) {
        $("#progress_bar .bar-loading").css("width", "15%");
        var template = $('#profile_link_template').html();
        $(data.links).each(function(i, link){
          var index = i;
          var formatted_link = link.profile.replace(/^https?:\/\//, "");

          $("#profiles").append(Mustache.to_html(template, {link: formatted_link, index: i}));

          verify_link_back(me, link, i);
        });
      } else {
        $("#progress_bar").hide();
        $(".loading_message").hide();
        if(data && data.error_description) {
          $(".no_links_error .message").text(data.error_description);
        }
        $(".no_links_error").show();
      }
    });
  }
}

</script>

<div class="wrapper">

  <% if @scope %>
    <div class="app-name">
      <% if @app_logo %>
        <img src="<%= @app_logo %>" style="float: left; margin-right: 6px; height: 40px;">
      <% end %>
      <h3 style="padding-top: 6px;">Allow <a href="<%= @client_id %>"><%= @app_name %></a> access to <%= display_url(@me) %>?</h3>
    </div>
    <div style="clear:both; margin-bottom:10px;"></div>

    <div class="continue_message" style="display: none;">
      <p>The app <b><%= @client_id %></b> would like to access your site, <b><%= @me %></b></p>

      <% if @scope %>
        <p>The app is requesting the following <a href="https://indieweb.org/scope">scopes</a>:<br>
          <ul>
            <%= @scope.split(' ').map{|s| "<li>#{s}</li>"}.join %>
          </ul>
        </p>
      <% end %>
      <p>Authenticate using one of the methods below to approve this request.</p>
    </div>
  <% else %>
    <div class="app-name">
      <% if @app_logo %>
        <img src="<%= @app_logo %>" style="float: left; margin-right: 6px; height: 40px;">
      <% end %>
      <%
      if @client_id && display_url(@client_id) == display_url(@app_name)
        display_name = "<a href=\"#{@client_id}\">#{@app_name}</a>"
      elsif @client_id
        display_name = "<a href=\"#{@client_id}\">#{@app_name}</a> (#{display_url(@client_id)})"
      else
        display_name = @app_name
      end
      %>
      <h3 style="padding-top: 6px;">Sign in to <%= display_name %></h3>
    </div>
    <div style="clear:both; margin-bottom:10px;"></div>
    <p>Authenticate using one of the methods below to sign in as <%= @me %></p>
  <% end %>

  <div class="loading_message">
    <div class="alert alert-info">Finding rel="me" links on <%= @me %></div>
  </div>

  <div class="no_links_error" style="display: none;">
    <div class="alert alert-error">
      <span class="message">No rel="me" links were found on your site!</span>
      <a class="rescan-button" href="#" style="float:right;"><i class="icon-retweet"></i> Re-Scan</a>
    </div>
  </div>
  <div class="unsupported_links_error" style="display: none;">
    <div class="alert alert-error">
      No supported rel="me" links were found on your site!
      <a class="rescan-button" href="#" style="float:right;"><i class="icon-retweet"></i> Re-Scan</a>
    </div>
  </div>
  <div class="continue_message" style="display: none;">
    <div class="alert alert-success">
      <span id="num_providers">1</span> supported and verified providers were found!
      <a class="rescan-button" href="#" style="float:right;"><i class="icon-retweet"></i> Re-Scan</a>
      <span class="last-refresh"><%= (@me ? User.last_refresh(@me) : '') %></span>
    </div>
  </div>

  <div id="progress_bar" class="progress progress-striped active">
    <div class="bar bar-success bar-loading" style="width: 5%;" rel="tooltip" title="Loaded links from your site"></div>
    <div class="bar bar-success bar-verified" style="width: 0%;" rel="tooltip" title="Verified profiles"></div>
    <div class="bar bar-info" style="width: 0;" rel="tooltip" title="Unsupported providers"></div>
    <div class="bar bar-danger" style="width: 0;" rel="tooltip" title="Error verifying provider"></div>
  </div>

  <ul id="profiles">
    <%
      # If they are a returning visitor, the database already has their list of profiles. Populate with that now.
      # The database will only return URLs that are valid providers, not the complete list of rel-me links on the person's site.
    %>
    <% @profiles.each_with_index do |profile,i| %>
      <% next if @redirect_uri == 'totp' and profile['provider'] == 'totp' %>
      <li class="profile <%= profile['provider'] %>" id="profile_<%= i %>" data-profile="<%= profile['href'] %>" data-verified="true" data-provider="<%= profile['provider'] %>" data-auth-path="<%= Provider.auth_path(profile['provider'], profile['href'], @me) %>">
        <span class="status_img verified"></span>
        <span class="link"><%= profile['href'] %></span>
        <div class="status">Verifying...</div>
      </li>
    <% end %>
  </ul>

  <div class="no_links_error" style="display: none;">
    <p>Add links on your home page to your various social profiles (Twitter, Github, etc) with the attribute rel="me"</p>
    <p>Ensure your profiles link back to your home page.</p>
    <p><a href="https://indieauth.com/setup">Full Setup Instructions</a></p>
  </div>
  <div class="unsupported_links_error" style="display: none;">
    <p>Add links on your home page to your various social profiles (Twitter, Github, etc) with the attribute rel="me"</p>
    <p>Ensure your profiles link back to your home page.</p>
    <p><a href="/setup">Full Setup Instructions</a></p>
  </div>
  <% if !@client_id %>
    <div class="continue_message" style="display: none;">
      <p>Click on one of the highlighed providers above to authenticate. The site you are logging in to will not have access to your account on any of the providers.</p>

      <% if @redirect_uri %>
        <div class="redirect">You will be redirected to <%= @redirect_uri %> to finish logging in to the site.</div>
      <% end %>
    </div>
  <% else %>
    <% if @redirect_uri %>
      <div class="redirect">You will be redirected to <code><%= @redirect_uri %></code> after authorizing this application.</div>
    <% end %>
  <% end %>

</div>

<div id="gpg-popup"><div class="in">
  <form>
    <div class="title">PGP Verification</div>
    <div class="error">
      <div class="alert" style="margin-bottom: 0;">Loading...</div>
    </div>
    <div class="fields">
      <label for="signature">Sign this text with your private key</label>
      <textarea rows="6" name="signature" class="signature"></textarea>
    </div>
    <div class="form-actions">
      <button type="button" class="btn btn-primary">Verify</button>
      <button type="button" class="btn btn-cancel">Cancel</button>
    </div>
    <input type="hidden" class="plaintext">
  </form>
</div></div>

<% if @gpg_challenges
  @gpg_challenges.each do |challenge|
    %><div style="display:none;" class="gpg_challenge" data-profile="<%= challenge[:profile] %>"><%= challenge[:challenge] %></div><%
  end
end %>

<div style="display:none;">
<img src="/img/profile-verified.png") />
<img src="/img/profile-unsupported.png") />
<img src="/img/profile-error.png") />
</div>

<script id="profile_link_template" type="text/template">
<li class="profile" id="profile_{{index}}">
  <span class="status_img loading"></span>
  <span class="link">{{link}}</span>
  <div class="status">Verifying...</div>
</li>
</script>
<style type="text/css">

  #gpg-popup {
    display: none;
    position: fixed;
    top: 70px;
    left: 30px;
    border: 6px rgba(80,80,80,0.8) solid;
    -webkit-border-radius: 6px;
    -moz-border-radius: 6px;
    border-radius: 6px;
  }
  #gpg-popup .in {
    background: white;
    display: block;
    width: 400px;
    height: 300px;
  }
  #gpg-popup .title {
    text-align: center;
    background: #f5f5f5;
    border-bottom: 1px solid #e5e5e5;
    margin-bottom: 10px;
    padding: 6px;
    font-weight: bold;
    font-size: 22px;
    color: #444;
  }
  #gpg-popup .fields {
    padding: 6px;
  }
  #gpg-popup textarea {
    width: 374px;
  }
  #gpg-popup .alert {
    -webkit-border-radius: 0;
    -moz-border-radius: 0;
    border-radius: 0;
  }

  .wrapper {
    width: 500px;
    margin: 20px auto;
  }

  h3 {
    font-size: 20px;
    font-weight: bold;
    color: #444;
  }

  ul#profiles {
    list-style-type: none;
  }

  .alert {
    padding-right: 17px;
  }

  .status_img {
    width: 16px;
    height: 16px;
    display: inline-block;
  }
  .status_img.loading {
    background-image: url(/img/loading.gif);
  }
  .status_img.verified {
    background-image: url(/img/profile-verified.png);
  }
  .status_img.unsupported {
    background-image: url(/img/profile-unsupported.png);
  }
  .status_img.error {
    background-image: url(/img/profile-error.png);
  }

  .continue_message .last-refresh {
    font-style: italic;
    float: right;
    margin-right: 10px;
  }

  #profiles .status {
    margin-left: 20px;
    color: #999;
  }

  .profile.selected {
    background-color: #ffffcc;
  }
</style>
